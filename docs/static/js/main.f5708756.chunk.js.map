{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","trim","length","newCategorie","type","value","placeholder","onChange","target","getGifs","category","a","urlFetch","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","url","images","downsized","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,uBAAMC,UAAU,aAAaC,SAdZ,SAACC,GAElBA,EAAEC,iBAGEL,EAAWM,OAAOC,OAAS,IAE3BT,GAAc,SAAAU,GAAY,OAAKR,GAAL,mBAAmBQ,OAE7CP,EAAc,MAKlB,UACI,uBACAQ,KAAK,OACLC,MAAOV,EACPW,YAAY,YACZC,SAtBkB,SAACR,GACvBH,EAAcG,EAAES,OAAOH,UAyBnB,iCAAS,mBAAGR,UAAU,wB,+BC/BrBY,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEwCC,UAAUH,GAFlD,+DAGKI,MAAMF,GAHX,cAGbG,EAHa,gBAKEA,EAAUC,OALZ,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,IACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,iBAAE,EAAYC,iBAAd,aAAE,EAAuBF,QAXjB,kBAgBXL,GAhBW,4CAAH,sDCAPQ,EAAc,SAAC,GAAqB,EAApBL,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEpC,OACI,sBAAK1B,UAAU,6CAAf,UACI,4BAAIyB,IACJ,qBAAKK,IAAKJ,EAAKK,IAAKN,QCHnBO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECFwB,SAACA,GAC3B,MAA0BhB,mBAAS,CACjCuB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,IAEIC,EDb0BK,CAAa1B,GAAhCc,EAAZ,EAAOP,KAAaa,EAApB,EAAoBA,QAEpB,OACI,qCACI,oBAAIjC,UAAU,mBAAd,SAAkCa,IAEjCoB,EACD,mBAAGjC,UAAU,2CAAb,wBACA,mBAAGA,UAAU,2CAAb,4BAEA,qBAAKA,UAAU,YAAf,SAEQ2B,EAAOL,KAAK,SAACC,GAET,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEfxCgB,EAAe,WAExB,MAAoC3C,mBAAS,IAA7C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAUA,OACI,sBAAKI,UAAU,SAAf,UACI,gDACA,cAAC,EAAD,CAAaJ,cAAeA,IAC5B,qBAAKI,UAAU,YAAf,SAEQyC,EAAWnB,KAAI,SAACT,GACZ,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCnB7C6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f5708756.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//Desestructuramos el prop mediante llaves {}\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e) =>{\r\n        //Bloqueamos la actualización de la página\r\n        e.preventDefault();\r\n\r\n        //Validamos que el input posea texto mediante un length\r\n        if (inputValue.trim().length > 2){\r\n            //De ser valido asignamos el texto al array mediante setCategories\r\n            setCategories(newCategorie => [inputValue,...newCategorie ]);\r\n            //Vaciamos el input para evitar duplicados al presionar doble submit\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <form className='formulario' onSubmit={handleSubmit}>\r\n            <input \r\n            type=\"text\"\r\n            value={inputValue}\r\n            placeholder='Buscar...'\r\n            onChange={\r\n                handleInputChange\r\n            }\r\n            />\r\n            <button ><i className=\"fas fa-search\"></i></button>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","    \r\n    \r\nexport const getGifs = async(category) =>{\r\n\r\n    const urlFetch = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=12&api_key=g1dCiL4mecdpaOWgTGtlvZzrLr0c9nBW`;\r\n    const respuesta = await fetch(urlFetch);\r\n    //Destructuramos data para evitar poner data.data\r\n    const {data} = await respuesta.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized?.url,\r\n        }\r\n    });\r\n    \r\n    //Le pasamos el array de 10 imagenes con su id, titulo y url\r\n    return (gifs);\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <p>{title}</p>\r\n            <img src={url} alt={title}></img>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"categoriaBuscada\">{category}</h3>\r\n\r\n            {loading ? \r\n            <p className=\"loading animate__animated animate__flash\">Loading...</p> : \r\n            <p className=\"loading animate__animated animate__pulse\">Gifs cargados!</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( (img) => {\r\n\r\n                        return <GifGridItem key={img.id} {...img}\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n//Los hooks son funciones\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return state; // {data: [], loading: true}\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    /* const handleAdd = () =>{\r\n        const newElement = 'Hunter x Hunter';\r\n        Usamos el spread operator para clonar el array y añadir el nuevo elemento\r\n        setCategories([...categories,newElement]);\r\n        Si queremos cambiar el orden del elemento podemos realizar:\r\n        setCategories([newElement,...categories]);\r\n    }   */  \r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <div className=\"contenido\">\r\n                {\r\n                    categories.map((category)=>{\r\n                        return <GifGrid key={category} category={category}/>\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}